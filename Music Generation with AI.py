# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JLXdtNgDlikenAi7vSeI524K49k6zMcJ
"""

pip install music21

pip install music21 tensorflow numpy

# part1_preprocessing.py
from music21 import converter, instrument, note, chord
import pickle
import os

def get_notes_from_midi(files):
    notes = []
    for file in files:
        midi = converter.parse(file)
        print(f"Parsing {file}")

        parts = instrument.partitionByInstrument(midi)
        elements = parts.parts[0].recurse() if parts else midi.flat.notes

        for element in elements:
            if isinstance(element, note.Note):
                notes.append(str(element.pitch))
            elif isinstance(element, chord.Chord):
                notes.append('.'.join(str(n) for n in element.normalOrder))

    return notes

def save_notes(notes, filename='data/notes.pkl'):
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    with open(filename, 'wb') as f:
        pickle.dump(notes, f)

if __name__ == "__main__":
    midi_files = [
        "lbtheme.mid", "lbvar1.mid", "lbvar2.mid", "lbvar6ep.mid"
    ]
    notes = get_notes_from_midi(midi_files)
    save_notes(notes)
    print(f"Total notes extracted: {len(notes)}")

import pickle
import numpy as np
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dropout, Dense, Activation
from tensorflow.keras.optimizers import Adam

def load_notes(filename='data/notes.pkl'):
    with open(filename, 'rb') as f:
        return pickle.load(f)

def prepare_sequences(notes, sequence_length=100):
    pitchnames = sorted(set(notes))
    note_to_int = {note: number for number, note in enumerate(pitchnames)}

    network_input = []
    network_output = []

    for i in range(len(notes) - sequence_length):
        seq_in = notes[i:i + sequence_length]
        seq_out = notes[i + sequence_length]
        network_input.append([note_to_int[n] for n in seq_in])
        network_output.append(note_to_int[seq_out])

    n_patterns = len(network_input)
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    network_input = network_input / float(len(pitchnames))
    network_output = to_categorical(network_output)

    return network_input, network_output, len(pitchnames)

def build_model(input_shape, vocab_size):
    model = Sequential()
    model.add(LSTM(512, input_shape=input_shape, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Dropout(0.3))
    model.add(Dense(vocab_size))
    model.add(Activation('softmax'))

    model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001))
    return model

if __name__ == "__main__":
    notes = load_notes()
    network_input, network_output, vocab_size = prepare_sequences(notes)
    model = build_model((network_input.shape[1], network_input.shape[2]), vocab_size)
    model.summary()

from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense, Activation
from keras.utils import to_categorical
import pickle
import numpy as np

def prepare_sequences(notes, sequence_length=100):
    pitch_names = sorted(set(notes))
    note_to_int = dict((note, number) for number, note in enumerate(pitch_names))

    network_input = []
    network_output = []

    for i in range(len(notes) - sequence_length):
        seq_in = notes[i:i + sequence_length]
        seq_out = notes[i + sequence_length]
        network_input.append([note_to_int[n] for n in seq_in])
        network_output.append(note_to_int[seq_out])

    n_patterns = len(network_input)
    network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    network_input = network_input / float(len(pitch_names))
    network_output = to_categorical(network_output)

    return network_input, network_output, note_to_int, pitch_names

def create_model(network_input, n_vocab):
    model = Sequential()
    model.add(LSTM(512, input_shape=(network_input.shape[1], network_input.shape[2]), return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam')
    return model

if __name__ == "__main__":
    with open("data/notes.pkl", "rb") as f:
        notes = pickle.load(f)

    network_input, network_output, note_to_int, pitch_names = prepare_sequences(notes)
    model = create_model(network_input, len(pitch_names))

    model.fit(network_input, network_output, epochs=200, batch_size=64)
    model.save("models/music_model.h5")

    # Save pitch mapping
    with open('models/mapping.pkl', 'wb') as f:
        pickle.dump((note_to_int, pitch_names), f)

    print("Training complete and model saved.")

from music21 import instrument, stream, note, chord
from keras.models import load_model
import numpy as np
import pickle
import random

import os  # Make sure to import this

# Ensure output directory exists
os.makedirs("output", exist_ok=True)

def create_midi(prediction, output_file="output/generated_music.mid"):
    ...


def generate_music(model_path="models/music_model.h5", mapping_path="models/mapping.pkl", sequence_length=100):
    with open("data/notes.pkl", "rb") as f:
        notes = pickle.load(f)

    with open(mapping_path, 'rb') as f:
        note_to_int, pitch_names = pickle.load(f)

    int_to_note = dict((number, note) for note, number in note_to_int.items())

    start = np.random.randint(0, len(notes) - sequence_length)
    pattern = [note_to_int[n] for n in notes[start:start + sequence_length]]

    model = load_model(model_path)

    prediction_output = []

    for note_index in range(500):
        input_seq = np.reshape(pattern, (1, len(pattern), 1))
        input_seq = input_seq / float(len(pitch_names))

        prediction = model.predict(input_seq, verbose=0)
        index = np.argmax(prediction)
        result = int_to_note[index]

        prediction_output.append(result)
        pattern.append(index)
        pattern = pattern[1:]

    return prediction_output

def create_midi(prediction_output, output_file="output/generated_music.mid"):
    output_notes = []

    offset = 0
    for pattern in prediction_output:
        if "." in pattern or pattern.isdigit():
            notes_in_chord = pattern.split(".")
            notes_objs = [note.Note(int(n)) for n in notes_in_chord]
            for n in notes_objs:
                n.storedInstrument = instrument.Piano()
            new_chord = chord.Chord(notes_objs)
            new_chord.offset = offset
            output_notes.append(new_chord)
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        offset += 0.5

    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp=output_file)

if __name__ == "__main__":
    prediction = generate_music()
    create_midi(prediction)
    print("Music generation complete and saved.")